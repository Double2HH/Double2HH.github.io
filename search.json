[{"title":"设计模式之工厂模式","url":"http://www.huangheng.site/设计模式/设计模式之工厂模式/","content":"<blockquote>\n<p>除了使用new操作符之外，还有更多制造对象的方法。你将了解到<strong>实例化这个活动不应该总是公开地进行</strong>，也会认识到<strong>初始化经常造成“耦合”问题</strong>。你不希望这样，对吧？读下去，你将了解工厂模式如何从复杂的依赖中帮你脱困。</p>\n</blockquote>\n<h3 id=\"当看到“new”，就会想到“具体”\"><a href=\"#当看到“new”，就会想到“具体”\" class=\"headerlink\" title=\"当看到“new”，就会想到“具体”\"></a>当看到“new”，就会想到“具体”</h3><p>我们不应该针对实现编程，但是当我们使用“new”时，不正是在针对实现编程吗？是的，当使用“new”时，的确是在实例化一个具体类，所以用的确实是实现，而不是接口。 这是一个好问题，代码绑着具体类会导致代码更脆弱，更缺乏弹性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Duck duck;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span>(picnic)&#123;</div><div class=\"line\">\tduck = <span class=\"keyword\">new</span> MallardDuck();  </div><div class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(hunting)&#123;</div><div class=\"line\">\tduck = <span class=\"keyword\">new</span> DecoyDuck();</div><div class=\"line\">&#125;</div><div class=\"line\">......</div></pre></td></tr></table></figure>\n<p>这里有一些要实例化的具体类，究竟实例化哪个类，要在运行时由一些条件决定。</p>\n<p>当看到这样的代码，一旦有变化或扩展，就必须重新打开这段代码进行检查和修改。通常这样修改过的代码将造成部分系统更难维护和更新，而且也更容易犯错。</p>\n<h3 id=\"“new”有什么不对劲？\"><a href=\"#“new”有什么不对劲？\" class=\"headerlink\" title=\"“new”有什么不对劲？\"></a>“new”有什么不对劲？</h3><p>在技术上，“new”没有错，毕竟这是Java的基础部分。真正的犯人是“改变”，以及它是如何影响“new”的使用的。</p>\n<p>针对接口编程，可以隔离掉以后系统可能发生的一大堆改变。为什么呢？如果代码是针对接口而写，那么通过多态，它可以与任何新类实现该接口。但是，当代码使用大量的具体类时，等于是自找麻烦，因为一旦加入新的具体类，就必须改变代码。也就是说，代码并非“对修改关闭”。想用新的具体类型类扩展代码，必须重新打开它。</p>\n<p>所以，该怎么办呢？当遇到这样的问题时，就应该到OO设计原则中去寻找线索。其中一个原则就是：<strong>找出会变化的方面，把它们从不变的部分分离出来</strong>。</p>\n<h3 id=\"识别变化的方面\"><a href=\"#识别变化的方面\" class=\"headerlink\" title=\"识别变化的方面\"></a>识别变化的方面</h3><p>假设你有一个披萨店，你的代码可能这么写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">\tPizza pizza = <span class=\"keyword\">new</span> Pizza();\t<span class=\"comment\">//为了让系统有弹性，我们很希望这是一个抽象类或接口。但如果这\t\t\t\t\t\t\t\t\t\t//样，这些类或接口就无法直接实例化</span></div><div class=\"line\">      \t</div><div class=\"line\">      <span class=\"comment\">//一旦我们有了一个披萨，需要做一些准备（就是擀揉面皮、加上佐料），然后烘烤、切片、装盒</span></div><div class=\"line\">      pizza.prepare();</div><div class=\"line\">      pizza.bake();</div><div class=\"line\">      pizza.cut();</div><div class=\"line\">      pizza.box();</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">return</span> pizza;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"但是你需要更多披萨类型······\"><a href=\"#但是你需要更多披萨类型······\" class=\"headerlink\" title=\"但是你需要更多披萨类型······\"></a>但是你需要更多披萨类型······</h3><p>所以必须增加一些代码，来“决定”适合的披萨类型，然后再“制造”这个披萨：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//现在把披萨类型传入orderPizza()</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\tPizza pizza;</div><div class=\"line\">     \t</div><div class=\"line\">\t<span class=\"comment\">//根据披萨的类型，我们实例化正确的具体类，然后将其赋值给pizza实例变量。请注意，这里的任何披萨\t\t\t都必须实现Pizza接口</span></div><div class=\"line\">     \t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"cheese\"</span>))&#123;</div><div class=\"line\">         pizza = <span class=\"keyword\">new</span> CheesePizza();</div><div class=\"line\">     \t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"greek\"</span>))&#123;</div><div class=\"line\">         pizza = <span class=\"keyword\">new</span> GreekPizza();</div><div class=\"line\">     \t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"pepperoni\"</span>))&#123;</div><div class=\"line\">         pizza = <span class=\"keyword\">new</span> PepperoniPizza();</div><div class=\"line\">     \t&#125;</div><div class=\"line\">     </div><div class=\"line\">     \tpizza.prepare();</div><div class=\"line\">     \tpizza.bake();</div><div class=\"line\">     \tpizza.cut();</div><div class=\"line\">     \tpizza.box();\t<span class=\"comment\">//每个Pizza的子类型都知道如何准备、烘烤、切片、装盒</span></div><div class=\"line\">     </div><div class=\"line\">     \t<span class=\"keyword\">return</span> pizza;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"但是压力来自于增加更多的披萨类型\"><a href=\"#但是压力来自于增加更多的披萨类型\" class=\"headerlink\" title=\"但是压力来自于增加更多的披萨类型\"></a>但是压力来自于增加更多的披萨类型</h3><p>你发现你所有的竞争者都已经在他们的菜单中加入了一些流行风味的披萨：Clam Pizza（蛤蜊披萨）、Veggie Pizza（素食披萨）。很明显，你必须要赶上他们，所以也要把这些风味加进你的菜单中。而最近Greek Pizza（希腊披萨）卖的不好，所以你决定将它从菜单中去掉：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\tPizza pizza;</div><div class=\"line\">     \t</div><div class=\"line\">     \t<span class=\"comment\">//此代码“没有”对修改封闭。如果披萨店改变它所供应的披萨风味，就得进到这里来修改</span></div><div class=\"line\">     \t<span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"cheese\"</span>))&#123;</div><div class=\"line\">         pizza = <span class=\"keyword\">new</span> CheesePizza();</div><div class=\"line\">     \t&#125;</div><div class=\"line\">         <span class=\"comment\">//移除GreekPizza</span></div><div class=\"line\">     \t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"pepperoni\"</span>))&#123;</div><div class=\"line\">         pizza = <span class=\"keyword\">new</span> PepperoniPizza();</div><div class=\"line\">     \t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"clam\"</span>))&#123;\t<span class=\"comment\">//添加ClamPizza和VeggiePizza</span></div><div class=\"line\">         pizza = <span class=\"keyword\">new</span> ClamPizza();</div><div class=\"line\">     \t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"veggie\"</span>))&#123;</div><div class=\"line\">         pizza = <span class=\"keyword\">new</span> VeggiePizza();</div><div class=\"line\">     \t&#125;</div><div class=\"line\">     </div><div class=\"line\">     \t<span class=\"comment\">//这里是我们不想改变的地方。因为披萨的准备、烘烤、切片、包装，多年来都持续不变，所以这部分代\t\t\t码不会改变，只有发生这些动作的披萨会改变</span></div><div class=\"line\">     \tpizza.prepare();</div><div class=\"line\">     \tpizza.bake();</div><div class=\"line\">     \tpizza.cut();</div><div class=\"line\">     \tpizza.box();\t</div><div class=\"line\">     </div><div class=\"line\">     \t<span class=\"keyword\">return</span> pizza;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>很明显地，如果实例化“某些”具体类，将使 <code>orderPizza()</code> 出问题，而且也无法让 <code>orderPizza()</code> 对修改关闭；但是，现在我们已经知道哪些会改变，哪些不会改变，该是使用封装的时候了。</p>\n<h3 id=\"封装创建对象的代码\"><a href=\"#封装创建对象的代码\" class=\"headerlink\" title=\"封装创建对象的代码\"></a>封装创建对象的代码</h3><p>现在最好将创建对象移到 <code>orderPizza()</code> 之外，但怎么做呢？这个嘛，要把创建披萨的代码移到另一个对象中，由这个新对象专职创建披萨。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">\tPizza pizza;</div><div class=\"line\">     \t</div><div class=\"line\">\t<span class=\"comment\">//首先，把创建对象的代码从orderPizza()方法中抽离，然后把这部分的代码搬到另一个对象\t\t \t\t（SimplePizzaFactory）中，这个新对象只管如何创建披萨。如果任何对象想要创建披萨，找它就对了</span></div><div class=\"line\">     \t</div><div class=\"line\">   \t<span class=\"comment\">//这里该怎么写？</span></div><div class=\"line\">     </div><div class=\"line\">     \tpizza.prepare();</div><div class=\"line\">     \tpizza.bake();</div><div class=\"line\">     \tpizza.cut();</div><div class=\"line\">     \tpizza.box();\t</div><div class=\"line\">     </div><div class=\"line\">     \t<span class=\"keyword\">return</span> pizza;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们称这个新对象为“<strong>工厂</strong>”。</p>\n<p>工厂（factory）处理创建对象的细节。一旦有了 SimplePizzaFactory ，<code>orderPizza()</code> 就变成此对象的客户。当需要披萨时，就叫披萨工厂做一个。现在 <code>orderPizza()</code> 方法只关心从工厂得到了一个披萨，而这个披萨实现了Pizza接口，所以它可以调用 <code>prepare()</code> 、<code>bake()</code> 、<code>cut()</code> 、<code>box()</code> 来分别进行准备、烘烤、切片、装盒。</p>\n<h3 id=\"建立一个简单披萨工厂\"><a href=\"#建立一个简单披萨工厂\" class=\"headerlink\" title=\"建立一个简单披萨工厂\"></a>建立一个简单披萨工厂</h3><p>先从工厂本身开始。我们要定义一个类，为所有披萨封装创建对象的代码。代码像这样······</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//SimplePizzaFactory只做一件事情：帮它的客户创建披萨</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimplePizzaFactory</span></span>&#123; </div><div class=\"line\">     </div><div class=\"line\">     \t<span class=\"comment\">//所有客户用createPizza()方法来实例化新对象</span></div><div class=\"line\">     \t<span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">        \t Pizza pizza;</div><div class=\"line\">         </div><div class=\"line\">         \t<span class=\"comment\">//这是从orderPizza()方法中移过来的代码</span></div><div class=\"line\">        \t <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"cheese\"</span>))&#123;</div><div class=\"line\">       \t  \tpizza = <span class=\"keyword\">new</span> CheesePizza();</div><div class=\"line\">     \t\t &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"pepperoni\"</span>))&#123;</div><div class=\"line\">        \t    pizza = <span class=\"keyword\">new</span> PepperoniPizza();</div><div class=\"line\">     \t\t &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"clam\"</span>))&#123;</div><div class=\"line\">        \t\tpizza = <span class=\"keyword\">new</span> ClamPizza();</div><div class=\"line\">     \t\t &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(type.equals(<span class=\"string\">\"veggie\"</span>))&#123;</div><div class=\"line\">       \t    pizza = <span class=\"keyword\">new</span> VeggiePizza();</div><div class=\"line\">     \t\t &#125;</div><div class=\"line\">        \t <span class=\"keyword\">return</span> pizza;</div><div class=\"line\">     \t&#125; </div><div class=\"line\">     </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li><p>这么做有什么好处？似乎只是把问题搬到另一个对象罢了，问题依然存在。</p>\n<p>别忘了，SimplePizzaFactory可以有许多的客户。虽然目前只看到 <code>orderPizza()</code> 方法是它的客户，然         而，可能还有PizzaShopMenu（披萨店菜单）类，会利用这个工厂来取得披萨的价钱和描述。</p>\n<p>所以，把创建披萨的代码包装进一个类，当以后实现改变时，只需修改这个类即可。别忘了，我们也正要把具体实例化的过程，从客户的代码中删除！</p>\n</li>\n<li><p>这与把工厂定义成一个静态的方法有何差别？</p>\n<p>利用静态方法定义一个简单的工厂，这是很常见的技巧，常被称为静态工厂，无需使用创建对象的方法即可实例化对象。但请记住，这也有缺点，不能通过继承来改变创建方法的行为。</p>\n</li>\n</ul>\n<h3 id=\"重做PizzaStore类\"><a href=\"#重做PizzaStore类\" class=\"headerlink\" title=\"重做PizzaStore类\"></a>重做PizzaStore类</h3><p>是时候修改我们的客户代码了，我们所要做的是仰仗工厂来为我们创建披萨，要做这样的改变：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span> </span>&#123;</div><div class=\"line\">   \tSimplePizzaFactory factory = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PizzaStore</span><span class=\"params\">(SimplePizzaFactory factory)</span> </span>&#123;</div><div class=\"line\">       \t<span class=\"keyword\">this</span>.factory = factory;</div><div class=\"line\">   \t&#125;</div><div class=\"line\"></div><div class=\"line\">   \t<span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span> </span>&#123;</div><div class=\"line\">       \tPizza pizza;</div><div class=\"line\"></div><div class=\"line\">         \t<span class=\"comment\">//请注意，我们把new操作符替换成工厂对象的创建方法，这里不再使用具体实例化，而是通过类型来\t\t\t\t使用工厂创建披萨</span></div><div class=\"line\">       \tpizza = factory.createPizza(type);</div><div class=\"line\"></div><div class=\"line\">       \tpizza.prepare();</div><div class=\"line\">       \tpizza.bake();</div><div class=\"line\">       \tpizza.cut();</div><div class=\"line\">       \tpizza.box();</div><div class=\"line\">       \t<span class=\"keyword\">return</span> pizza;</div><div class=\"line\">   \t&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"定义简单工厂\"><a href=\"#定义简单工厂\" class=\"headerlink\" title=\"定义简单工厂\"></a>定义简单工厂</h3><p>简单工厂其实不是一个设计模式，反而比较像是一种编程习惯。有些开发人员的确是把这个编程习惯误认为是“工厂模式”（Factory Pattern）。不要因为简单工厂不是一个“真正的”模式，就忽略了它的用法。让我们来看看新的披萨店类图：</p>\n<p><img src=\"\\img\\披萨店类图.png\" alt=\"图1:披萨店类图\"></p>\n<p>谢谢简单工厂来为我们暖身。接下来登场的是两个重量级的模式，它们都是工厂。</p>\n<p>但是别担心，未来还有更多的披萨！</p>\n<p><strong>再提醒一次：在设计模式中，所谓的 “实现一个接口” 并 “不一定” 表示 “写一个类，并利用implement关键词来实现某个Java接口”。“实现一个接口” 泛指 “实现某个超类型（可以是类或接口的某个方法）”。</strong></p>\n<h2 id=\"工厂方法模式\"><a href=\"#工厂方法模式\" class=\"headerlink\" title=\"工厂方法模式\"></a>工厂方法模式</h2><h3 id=\"加盟披萨店\"><a href=\"#加盟披萨店\" class=\"headerlink\" title=\"加盟披萨店\"></a>加盟披萨店</h3><p>披萨店经营有成，击败了竞争者，现在大家都希望披萨店能够在自家附近有加盟店。但是每家加盟店都可能想要提供不同风味的披萨（比方说纽约、芝加哥、加州）。</p>\n<p><img src=\"\\img\\加盟披萨店.png\" alt=\"图2:加盟披萨店\"></p>\n<h3 id=\"我们已经有一个做法······\"><a href=\"#我们已经有一个做法······\" class=\"headerlink\" title=\"我们已经有一个做法······\"></a>我们已经有一个做法······</h3><p>如果利用SimplePizzaFactory，写出三种不同的工厂，分别是NYPizzaFactory、ChicagoPizzaFactory、CaliforniaPizzaFactory，那么各地加盟店都有适合的工厂可以使用，这是一种做法。</p>\n<p>让我们来看看会变成什么样子······</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">NYPizzaFactory nyFactory = <span class=\"keyword\">new</span> NYPizzaFactory();<span class=\"comment\">//这里创建的工厂，是制造纽约风味的披萨</span></div><div class=\"line\">PizzaStore nyStore = <span class=\"keyword\">new</span> PizzaStore(nyFactory);<span class=\"comment\">//然后建立一个披萨店，将纽约工厂的引用作为参数</span></div><div class=\"line\">nyStore.orderPizza(<span class=\"string\">\"Veggie\"</span>);<span class=\"comment\">//当我们制造披萨，会得到纽约风味的披萨</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ChicagoPizzaFactory chicagoFactory = <span class=\"keyword\">new</span> ChicagoPizzaFactory();</div><div class=\"line\">PizzaStore chicagoStore = <span class=\"keyword\">new</span> PizzaStore(chicagoFactory);</div><div class=\"line\">chicagoStore.orderPizza(<span class=\"string\">\"Veggie\"</span>);<span class=\"comment\">//芝加哥披萨店也类似，制造出来的披萨，是芝加哥风味的披萨</span></div></pre></td></tr></table></figure>\n<h3 id=\"但是你想要多一些质量控制······\"><a href=\"#但是你想要多一些质量控制······\" class=\"headerlink\" title=\"但是你想要多一些质量控制······\"></a>但是你想要多一些质量控制······</h3><p>在推广SimpleFactory时，你发现加盟店的确是采用你的工厂创建披萨，但是其他部分，却开始采用他们自创的流程：烘烤的做法有些差异、不要切片、使用其他厂商的盒子。</p>\n<p>再想想这个问题，你真的希望能够建立一个框架，把加盟店和创建披萨捆绑在一起的同时又保持一定的弹性。</p>\n<p>在我们稍早的SimplePizzaFactory代码之前，制作披萨的代码捆绑在PizzaStore里，但这么做却没有弹性。那么，该如何做呢？</p>\n<h3 id=\"给披萨店使用的框架\"><a href=\"#给披萨店使用的框架\" class=\"headerlink\" title=\"给披萨店使用的框架\"></a>给披萨店使用的框架</h3><p>有个做法可让披萨制作活动局限于PizzaStore类，而同时又能让这些加盟店依然可以自由地制作该区域的风味。</p>\n<p>所要做的事情，就是把 <code>createPizza()</code> 这个<strong>“工厂方法”</strong>放回到PizzaStore中，不过要把它设置成“抽象方法”，然后为每个区域风味创建一个PizzaStore的子类。</p>\n<p>首先，看看PizzaStore所做的改变：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">      Pizza pizza;</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"comment\">//现在createPizza()方法从工厂对象中移回PizzaStore</span></div><div class=\"line\">      pizza = createPizza(type);</div><div class=\"line\">      </div><div class=\"line\">      pizza.prepare();</div><div class=\"line\">      pizza.bake();</div><div class=\"line\">      pizza.cut();</div><div class=\"line\">      pizza.box();</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">return</span> pizza;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"comment\">//现在把工厂对象移到这个方法中</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在已经有一个PizzaStore作为超类；让每个域类型（NYPizzaStore、ChicagoPizzaStore、CaliforniaPizzaStore）都继承这个PizzaStore，每个子类各自决定如何制造披萨。让我们看看这要如何进行。</p>\n<h3 id=\"允许子类做决定\"><a href=\"#允许子类做决定\" class=\"headerlink\" title=\"允许子类做决定\"></a>允许子类做决定</h3><p>别忘了，PizzaStore已经有一个不错的订单系统，由 <code>orderPizza()</code> 方法负责处理订单，而你希望所有加盟店对于订单的处理都能够一致。</p>\n<p>各个区域披萨店之间的差异在于他们制作披萨的风味，我们现在要让 <code>createPizza()</code> 能够应对这些变化来负责创建正确种类的披萨。做法是让PizzaStore的各个子类负责定义自己的 <code>createPizza()</code> 方法。所以我们会得到一些PizzaStore具体的子类，每个子类都有自己的披萨变体，而仍然适合PizzaStore框架，并使用调试好的 <code>orderPizza()</code> 方法。</p>\n<p><img src=\"\\img\\PizzaStore作为超类.png\" alt=\"图2:PizzaStore作为超类\"></p>\n<p><code>orderPizza()</code> 方法在抽象的PizzaStore内而不是在子类中定义。所以此方法并不知道哪个子类将实际上制作披萨。</p>\n<p>现在，更进一步地，<code>orderPizza()</code> 方法对Pizza对象做了许多事情（例如：准备、烘烤、切片、装盒），但由于Pizza对象是抽象的，<code>orderPizza()</code> 并不知道哪些实际的具体类参与进来了。换句话说，这就是解耦！</p>\n<p><code>orderPizza()</code> 调用 <code>createPizza()</code> 取得披萨对象。但究竟会取得哪一种披萨？这不是 <code>orderPizza()</code> 方法所能决定的，那么究竟是由谁来做决定呢？</p>\n<p>当 <code>orderPizza()</code> 调用 <code>createPizza()</code> 时，某个披萨店子类将负责创建披萨。做哪一种披萨呢？当然是由具体的披萨店来决定（例如：NYStylePizzaStore、ChicagoStylePizzaStore）。</p>\n<h3 id=\"让我们开一家披萨店吧！\"><a href=\"#让我们开一家披萨店吧！\" class=\"headerlink\" title=\"让我们开一家披萨店吧！\"></a>让我们开一家披萨店吧！</h3><p>开加盟店有它的好处，可以从PizzaStore免费取得所有的功能。区域店只需要继承PizzaStore，然后提供 <code>createPizza()</code> 方法实现自己的披萨风味即可。这里将以纽约风味的加盟店为例，其余风味的加盟店类似：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYStylePizzaStore</span> <span class=\"keyword\">extends</span> <span class=\"title\">PizzaStore</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span> </span>&#123;</div><div class=\"line\">      \t<span class=\"comment\">//这就是创建具体类的地方。对于每一种披萨类型，都是创建纽约风味。</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"cheese\"</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NYStyleCheesePizza();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"veggie\"</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NYStyleVeggiePizza();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"> </div><div class=\"line\">  \t<span class=\"comment\">//请注意，超类的orderPizza()方法，并不知道正在创建的披萨是哪一种，它只知道这个披萨可以</span></div><div class=\"line\">  \t<span class=\"comment\">//被准备、烘烤、切片、装盒！</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"声明一个工厂方法\"><a href=\"#声明一个工厂方法\" class=\"headerlink\" title=\"声明一个工厂方法\"></a>声明一个工厂方法</h3><p>原本是由一个对象负责所有具体类的实例化，现在通过对PizzaStore做一些小转变，变成由一群子类来负责实例化。让我们看得更仔细些：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaStore</span></span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">orderPizza</span><span class=\"params\">(String type)</span></span>&#123;</div><div class=\"line\">      Pizza pizza;</div><div class=\"line\">      </div><div class=\"line\">      pizza = createPizza(type);</div><div class=\"line\">      </div><div class=\"line\">      pizza.prepare();</div><div class=\"line\">      pizza.bake();</div><div class=\"line\">      pizza.cut();</div><div class=\"line\">      pizza.box();</div><div class=\"line\">      </div><div class=\"line\">      <span class=\"keyword\">return</span> pizza;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//PizzaStore的子类在createPizza()方法中处理对象的实例化；</span></div><div class=\"line\">    <span class=\"comment\">//现在，实例化披萨的责任被移到一个“方法”中，此方法就如同是一个“工厂”。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String type)</span></span>;</div><div class=\"line\">  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>工厂方法用来处理对象的创建，并将这样的行为封装在子类中。这样，客户程序中关于超类的代码就和子类对象创建代码解耦了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//1.工厂方法是抽象的，所以依赖子类来处理对象的创建</span></div><div class=\"line\"><span class=\"comment\">//2.工厂方法必须返回一个产品。超类中定义的方法，通常使用到工厂方法的返回值</span></div><div class=\"line\"><span class=\"comment\">//3.工厂方法将客户（也就是超类中的代码，例如orderPizza()）和实际创建具体产品的代码分隔开来</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">abstract</span> Product <span class=\"title\">factoryMethod</span><span class=\"params\">(String type)</span></span></div></pre></td></tr></table></figure>\n<h3 id=\"看看如何根据订单生产这些披萨······\"><a href=\"#看看如何根据订单生产这些披萨······\" class=\"headerlink\" title=\"看看如何根据订单生产这些披萨······\"></a>看看如何根据订单生产这些披萨······</h3><ol>\n<li><p>首先我们需要一个披萨店（例如：纽约披萨店）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">PizzaStore nyStylePizzaStore = <span class=\"keyword\">new</span> NYStylePizzaStore();</div></pre></td></tr></table></figure>\n</li>\n<li><p>现在有了一个店，可以下订单了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nyStylePizzaStore.orderPizza(<span class=\"string\">\"cheese\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>orderPizza()方法于是调用createPizza()方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//别忘了，工厂方法createPizza()是在子类中实现的。在这个例子中，它会返回纽约芝士披萨。</span></div><div class=\"line\">Pizza pizza = createPizza(<span class=\"string\">\"cheese\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后，披萨必须经过下列的处理才算完成orderPizza()：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">pizza.prepare();</div><div class=\"line\">pizza.bake();</div><div class=\"line\">pizza.cut();</div><div class=\"line\">pizza.box();</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"忽略了一件事：披萨本身！\"><a href=\"#忽略了一件事：披萨本身！\" class=\"headerlink\" title=\"忽略了一件事：披萨本身！\"></a>忽略了一件事：披萨本身！</h3><p>如果没有披萨可出售，我们的披萨店开得再多也不行。现在让我们来实现披萨：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Pizza</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">//每一个披萨都具有名称、面团类型、酱料类型、一套佐料</span></div><div class=\"line\">    String name;</div><div class=\"line\">    String dough;</div><div class=\"line\">    String sauce;</div><div class=\"line\">    ArrayList toppings = <span class=\"keyword\">new</span> ArrayList();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//此抽象类提供了某些默认的基本做法，用来进行烘烤、切片、装盒 </span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">prepare</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Preparing \"</span> + name);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Tossing dough... \"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Adding sauce... \"</span>);</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Adding toppings: \"</span>);</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; toppings.size(); i++) &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"   \"</span> + toppings.get(i));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">bake</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Bake for 25 minutes at 350\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Cutting the pizza into diagonal slices\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">box</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Place pizza in official PizzaStore box\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在我们需要一些具体子类······来定义纽约和芝加哥风味的芝士披萨，怎么样？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//纽约芝士披萨</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">NYStyleCheesePizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span> </span>&#123;</div><div class=\"line\">    </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">NYStyleCheesePizza</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        name = <span class=\"string\">\"NY Style Sauce and Cheese Pizza\"</span>;</div><div class=\"line\">        dough = <span class=\"string\">\"Thin Crust Dough\"</span>;</div><div class=\"line\">        sauce = <span class=\"string\">\"Marinara Sauce\"</span>;</div><div class=\"line\">        toppings.add(<span class=\"string\">\"Grated Reggiano Cheese\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//芝加哥芝士披萨</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChicagoStyleCheesePizza</span> <span class=\"keyword\">extends</span> <span class=\"title\">Pizza</span> </span>&#123;</div><div class=\"line\">   </div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ChicagoStyleCheesePizza</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        name = <span class=\"string\">\"Chicago Style Deep Dish Cheese Pizza\"</span>;</div><div class=\"line\">        dough = <span class=\"string\">\"Extra Thick Crust Dough\"</span>;</div><div class=\"line\">        sauce = <span class=\"string\">\"Plum Tomato Sauce\"</span>;</div><div class=\"line\">        toppings.add(<span class=\"string\">\"Shredded Mozzarella Cheese\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">cut</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"Cutting the pizza into square slices\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"你已经等得够久了，来吃些披萨吧！\"><a href=\"#你已经等得够久了，来吃些披萨吧！\" class=\"headerlink\" title=\"你已经等得够久了，来吃些披萨吧！\"></a>你已经等得够久了，来吃些披萨吧！</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PizzaTestDrive</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</div><div class=\"line\">      \t<span class=\"comment\">//首先建立两个不同的店</span></div><div class=\"line\">        PizzaStore nyStore = <span class=\"keyword\">new</span> NYStylePizzaStore();</div><div class=\"line\">        PizzaStore chicagoStore = <span class=\"keyword\">new</span> ChicagoStylePizzaStore();</div><div class=\"line\"></div><div class=\"line\">        Pizza pizza = nyStore.orderPizza(<span class=\"string\">\"cheese\"</span>);</div><div class=\"line\">        System.out.println(pizza.getName());</div><div class=\"line\"></div><div class=\"line\">        System.out.println(<span class=\"string\">\"\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">        pizza = chicagoStore.orderPizza(<span class=\"string\">\"cheese\"</span>);</div><div class=\"line\">        System.out.println(pizza.getName());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">Preparing NY Style Sauce and Cheese Pizza</div><div class=\"line\">Tossing dough... </div><div class=\"line\">Adding sauce... </div><div class=\"line\">Adding toppings: </div><div class=\"line\">   Grated Reggiano Cheese</div><div class=\"line\">Bake for 25 minutes at 350</div><div class=\"line\">Cutting the pizza into diagonal slices</div><div class=\"line\">Place pizza in official PizzaStore box</div><div class=\"line\">NY Style Sauce and Cheese Pizza</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Preparing Chicago Style Deep Dish Cheese Pizza</div><div class=\"line\">Tossing dough... </div><div class=\"line\">Adding sauce... </div><div class=\"line\">Adding toppings: </div><div class=\"line\">   Shredded Mozzarella Cheese</div><div class=\"line\">Bake for 25 minutes at 350</div><div class=\"line\">Cutting the pizza into square slices</div><div class=\"line\">Place pizza in official PizzaStore box</div><div class=\"line\">Chicago Style Deep Dish Cheese Pizza</div></pre></td></tr></table></figure>\n<h3 id=\"认识工厂方法模式的时刻终于到了\"><a href=\"#认识工厂方法模式的时刻终于到了\" class=\"headerlink\" title=\"认识工厂方法模式的时刻终于到了\"></a>认识工厂方法模式的时刻终于到了</h3><p>所有工厂模式都用来封装对象的创建。工厂方法模式通过让子类决定该创建的对象是什么，来达到将对象的创建的过程封装的目的。让我们来看看这些类图，以了解有哪些组成元素：</p>\n<p><img src=\"\\img\\工厂方法模式.png\" alt=\"图3:工厂方法模式\"></p>\n<h3 id=\"另一个观点：平行的类层级\"><a href=\"#另一个观点：平行的类层级\" class=\"headerlink\" title=\"另一个观点：平行的类层级\"></a>另一个观点：平行的类层级</h3><p>我们已经看到，将一个 <code>orderPizza()</code> 方法和一个工厂方法联合起来，就可以成为一个框架。除此之外，工厂方法将生产知识封装进各个创建者，这样的做法，也可以被视为是一个框架。</p>\n<p>让我们来看看这两个平行的类层级，并认清它们的关系：</p>\n<p><img src=\"\\img\\工厂方法模式_平行类层级.png\" alt=\"图4:工厂方法模式_平行类层级\"></p>\n<h3 id=\"定义工厂方法模式\"><a href=\"#定义工厂方法模式\" class=\"headerlink\" title=\"定义工厂方法模式\"></a>定义工厂方法模式</h3><p>下面是工厂方法模式的正式定义：</p>\n<p>​    <strong>工厂方法模式</strong>定义了一个创建对象的接口（也称为“工厂方法”），但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。</p>\n<h3 id=\"一个很依赖的披萨店\"><a href=\"#一个很依赖的披萨店\" class=\"headerlink\" title=\"一个很依赖的披萨店\"></a>一个很依赖的披萨店</h3><p>假设你从未听说过OO工厂。下面是一个不适用工厂模式的披萨店版本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DependentPizzaStore</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Pizza <span class=\"title\">createPizza</span><span class=\"params\">(String style, String type)</span> </span>&#123;</div><div class=\"line\">        Pizza pizza = <span class=\"keyword\">null</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (style.equals(<span class=\"string\">\"NY\"</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"cheese\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NYStyleCheesePizza();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"veggie\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NYStyleVeggiePizza();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"clam\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NYStyleClamPizza();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"pepperoni\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> NYStylePepperoniPizza();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (style.equals(<span class=\"string\">\"Chicago\"</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"cheese\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ChicagoStyleCheesePizza();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"veggie\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ChicagoStyleVeggiePizza();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"clam\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ChicagoStyleClamPizza();</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type.equals(<span class=\"string\">\"pepperoni\"</span>)) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ChicagoStylePepperoniPizza();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            System.out.println(<span class=\"string\">\"Error:invalid type of pizza\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        pizza.prepare();</div><div class=\"line\">        pizza.bake();</div><div class=\"line\">        pizza.cut();</div><div class=\"line\">        pizza.box();</div><div class=\"line\">        <span class=\"keyword\">return</span> pizza;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>当你直接实例化一个对象时，就是在依赖它的具体类。看看这个依赖性很高的披萨店例子，它由披萨店类来创建所有的披萨对象，而不是委托给工厂。</p>\n<p>这个版本的 PizzaStore 依赖于所有的披萨对象，因为它直接创建这些披萨对象。因为对于披萨具体实现的任何改变都会影响到 PizzaStore ，我们说 PizzaStore “依赖于“ 披萨的实现。每新增一个披萨种类，就等于让 PizzaStore 多了一个依赖。</p>\n<h3 id=\"依赖倒置原则\"><a href=\"#依赖倒置原则\" class=\"headerlink\" title=\"依赖倒置原则\"></a>依赖倒置原则</h3><p>很清楚地，代码里减少对于具体类的依赖是件“好事”。事实上，有一个OO设计原则就正式阐明了这一点；这个原则甚至还有一个又响亮又正式的名称：<strong>“依赖倒置原则”</strong>。</p>\n<p>通则如下：<strong>要依赖抽象，不要依赖具体类</strong>。</p>\n<p>首先，这个原则听起来很像是“针对接口编程，不针对实现编程”，不是吗？的确很相似，然而这里更强调“抽象”。这个原则说明了：<strong>不能让高层组件依赖低层组件，而且，不管高层或低层组件，“两者”都应该依赖于抽象</strong>。所谓“高层”组件，是由其他低层组件定义其行为的类。例如，PizzaStore是个高层组件，因为它的行为是由披萨定义的：PizzaStore创建所有不同的披萨对象、准备、烘烤、切片、装盒；而披萨本身属于低层组件。</p>\n<p>我们来想想看怎样在“一个很依赖的披萨店”实现中，应用这个原则······</p>\n<h3 id=\"原则的应用\"><a href=\"#原则的应用\" class=\"headerlink\" title=\"原则的应用\"></a>原则的应用</h3><p>“一个很依赖的披萨店”的主要问题在于：它依赖每个披萨类型。因为它是在自己的 <code>orderPizza()</code> 方法中，实例化这些具体类型的。</p>\n<p>虽然我们已经创建了一个抽象，也就是Pizza，但我们仍然在代码中，实际地创建了具体的Pizza，所以，这个抽象没什么影响力。</p>\n<p>如何在 <code>orderPizza()</code> 方法中，将这些实例化对象的代码独立出来？我们都知道，工厂方法刚好能派上用场。</p>\n<p>所以，应用工厂方法之后，类图看起来就像这样：</p>\n<p><img src=\"\\img\\工厂方法类图.png\" alt=\"图5:工厂方法类图\"></p>\n<p>在应用工厂方法之后，你就注意到，高层组件（也就是PizzaStore）和低层组件（也就是这些具体的披萨）都依赖了Pizza抽象。想要遵循依赖倒置原则，工厂方法并非是唯一的技巧，但却是最有威力的技巧之一。</p>\n<h3 id=\"依赖倒置原则，究竟倒置在哪里？\"><a href=\"#依赖倒置原则，究竟倒置在哪里？\" class=\"headerlink\" title=\"依赖倒置原则，究竟倒置在哪里？\"></a>依赖倒置原则，究竟倒置在哪里？</h3><p>在依赖倒置原则中的倒置指的是和一般OO设计的思考方式完全相反。看看前一张图，你会注意到低层组件现在竟然依赖高层的抽象。同样地，高层组件现在也依赖相同的抽象。前几张绘制的依赖图是由上而下的，现在却倒置了，而且高层与低层模块现在都依赖这个抽象。</p>\n<p>让我们好好地回顾一个设计过程来看看，究竟使用了这个原则之后，对设计的思考方式会被怎样地倒置·····</p>\n<ul>\n<li><p>如果你需要实现一个披萨店，你第一件想到的事情是什么？</p>\n<p>嗯！披萨店进行准备、烘烤、装盒，所以我的店必须能制作许多不同风味的披萨，例如：芝士披萨、素食披萨、蛤蜊披萨······</p>\n</li>\n<li><p>没错！先从顶端开始，然后往下到具体类。但是，正如你所看到的你不想让披萨店理会这些具体类，要不然披萨店将全部依赖这些具体类。现在，“倒置”你的想法······别从顶端开始，而是从披萨（Pizza）开始，然后想想看能抽象化些什么。</p>\n<p>是的，芝士披萨、素食披萨和蛤蜊披萨都是披萨，所以它们应该共享一个Pizza接口。</p>\n</li>\n<li><p>对了，你想要抽象化一个Pizza。好，现在回头重新思考如何设计披萨店。</p>\n<p>既然我已经有一个披萨抽象，就可以开始设计披萨店，而不用理会具体的披萨类了。</p>\n</li>\n<li><p>很接近了，但是要这么做，必须靠一个工厂来将这些具体类取出披萨店。一旦你这么做了，各种不同的具体披萨类型就只能依赖一个抽象，而披萨店也会依赖这个抽象。我们已经倒置了一个商店依赖具体类的设计，而且也倒置了你的思考方式。</p>\n</li>\n</ul>\n<h3 id=\"几个指导方针帮助你遵循此原则······\"><a href=\"#几个指导方针帮助你遵循此原则······\" class=\"headerlink\" title=\"几个指导方针帮助你遵循此原则······\"></a>几个指导方针帮助你遵循此原则······</h3><p>下面的指导方针，能帮你避免在OO设计中违反依赖倒置原则：</p>\n<ul>\n<li>变量不可以持有具体类的引用（如果使用new，就会持有具体类的引用。你可以改用工厂方法来避开这样的做法。）</li>\n<li>不要让类派生自具体类。（如果派生自具体类，你就会依赖具体类。请派生自一个抽象（接口或抽象类））</li>\n<li>不要覆盖基类中已实现的方法。（如果覆盖基类中已实现的方法，那么你的基类就不是一个真正适合被继承的抽象。基类中已实现的方法，应该由所有的子类共享。）</li>\n</ul>\n","categories":["设计模式"],"tags":["java","pattern"]},{"title":"用两个队列实现栈","url":"http://www.huangheng.site/编程题/用两个队列实现栈/","content":"<blockquote>\n<p>用两个队列实现栈。栈的声明如下，请实现它的两个函数push和pop，分别完成结点入栈和出栈的功能。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>我们通过一系列栈的压入和弹出操作来分析用两个队列模拟一个栈的过程。我们先往栈内压入一个元素a。由于两个队列现在都是空的，我们可以选择把a插入到两个队列中的任意一个。我们不妨把a插入queue1。接下来继续往栈内压入b、c两个元素，我们把它们都插入queue1。这个时候queue1包含3个元素a、b和c，其中a位于队列的头部，c位于队列的尾部（如图1（a）所示）。</p>\n<p>现在我们考虑从栈内弹出一个元素。根据栈的后入先出原则，最后被压入栈的c应该最先被弹出。由于c位于queue1的尾部，而我们每次只能从队列的头部删除元素，因此我们可以先从queue1中依次删除元素a、b并插入到queue2中，再从queue1中删除元素c。这就相当于从栈中弹出元素c了（如图1（b）所示）。我们可以用同样的方法从栈内弹出元素b（如图1（c）所示）。</p>\n<p>接下来我们考虑往栈内压入一个元素d。此时queue1已经有一个元素，我们就把d插入到queue1的尾部（如图1（d）所示）。如果我们再从栈内弹出一个元素，此时被弹出的应该是最后被压入栈的d。由于d位于queue1的尾部，我们只能先从头删除queue1的元素并插入到queue2，直到在queue1中遇到d再直接把它删除（如图1（e）所示）。</p>\n<p><img src=\"\\img\\用两个队列模拟一个栈的操作.png\" alt=\"图1：用两个队列模拟一个栈的操作\"></p>\n<p>参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StackUsingTwoQueue</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//声明两个队列:queue1、queue2</span></div><div class=\"line\">    <span class=\"keyword\">private</span> LinkedBlockingQueue&lt;T&gt; queue1;</div><div class=\"line\">    <span class=\"keyword\">private</span> LinkedBlockingQueue&lt;T&gt; queue2;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">StackUsingTwoQueue</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        queue1 = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;T&gt;();</div><div class=\"line\">        queue2 = <span class=\"keyword\">new</span> LinkedBlockingQueue&lt;T&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 将一个元素入栈</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> element 将要入栈的元素</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">push</span><span class=\"params\">(T element)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//将元素插入到不为空的队列的尾部，如果两个队列均为空则插入到queue1</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (queue1.size() &lt;= <span class=\"number\">0</span> &amp;&amp; queue2.size() &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                queue1.put(element);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (queue1.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                queue1.put(element);</div><div class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                queue2.put(element);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 将栈顶元素出栈</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 栈顶元素</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">pop</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        T result = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (queue1.size() &lt;= <span class=\"number\">0</span> &amp;&amp; queue2.size() &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//栈为空</span></div><div class=\"line\">            System.out.print(<span class=\"string\">\"Stack is empty.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (queue1.size() &gt; <span class=\"number\">0</span> &amp;&amp; queue2.size() &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//队列queue1不为空，queue2为空，</span></div><div class=\"line\">            <span class=\"comment\">//将queue1中除尾部元素之外的全部元素依次出队列并插入到queue2队列中</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">while</span> (queue1.size() &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    T element = queue1.poll();</div><div class=\"line\">                    queue2.put(element);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//queue1中仅剩的一个元素即为栈顶元素</span></div><div class=\"line\">            result = queue1.poll();</div><div class=\"line\"></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (queue1.size() &lt;= <span class=\"number\">0</span> &amp;&amp; queue2.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"comment\">//队列queue2不为空，queue1为空，</span></div><div class=\"line\">            <span class=\"comment\">//将queue2中除尾部元素之外的全部元素依次出队列并插入到queue1队列中</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">while</span> (queue2.size() &gt; <span class=\"number\">1</span>) &#123;</div><div class=\"line\">                    T element = queue2.poll();</div><div class=\"line\">                    queue1.put(element);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                e.printStackTrace();</div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">//queue2中仅剩的一个元素即为栈顶元素</span></div><div class=\"line\">            result = queue2.poll();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["编程题"],"tags":["java","algorithm"]},{"title":"用两个栈实现队列","url":"http://www.huangheng.site/编程题/用两个栈实现队列/","content":"<blockquote>\n<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数appendTail和deleteHead，分别完成在队列尾部插入结点和在队列头部删除结点的功能。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>我们通过一个具体的例子来分析往该队列插入和删除元素的过程。首先插入一个元素a，不妨先把它插入到stack1，此时stack1中的元素有{a}，stack2为空。再插入两个元素b和c，还是插入到stack1中，此时stack1中的元素有{a,b,c}，其中c位于栈顶，而stack2仍然是空的（如图1（a）所示）。</p>\n<p>这个时候我们试着从队列中删除一个元素。按照队列先入先出的规则，由于a比b、c先插入到队列中，最先被删除的元素应该是a。元素a存储在stack1中，但并不在栈顶上，因此不能直接进行删除。注意到stack2我们还一直没有使用过，现在是让stack2发挥作用的时候了。如果我们把stack1中的元素逐个弹出并压入stack2，元素在stack2中的顺序正好和原来在stack1中的顺序相反。因此经过3次弹出stack1和压入stack2操作之后，stack1为空，而stack2中的元素是{c,b,a}，这个时候就可以弹出stack2的栈顶a了。此时的stack1为空，而stack2的元素为{c,b}，其中b在栈顶（如图1（b）所示）。</p>\n<p>如果我们还想继续删除队列的头部应该怎么办呢？剩下的两个元素是b和c，b比c早进入队列，因此b应该先删除。而此时b恰好又在栈顶上，因此直接弹出stack2的栈顶即可。这次弹出操作之后，stack1中仍然为空，而stack2为{c}（如图1（c）所示）。</p>\n<p>从上面的分析中我们可以总结出删除一个元素的步骤：当stack2中不为空时，在stack2中的栈顶元素是最先进入队列的元素，可以弹出。如果stack2为空时，我们把stack1中的元素逐个弹出并压入stack2。由于先进入队列的元素被压到stack1的底端，经过弹出和压入之后就处于stack2的顶端了，又可以直接弹出。</p>\n<p>接下来再插入一个元素d。我们还是把它压入stack1（如图1（d）所示），这样会不会有问题呢？我们考虑下一次删除队列的头部，stack2不为空，直接弹出它的栈顶元素c（如图1（e）所示）。而c的确是比d先进入队列，应该在d之前从队列中删除，因此不会出现任何矛盾。</p>\n<p><img src=\"\\img\\用两个栈模拟一个队列的操作.png\" alt=\"图1:用两个栈模拟一个队列的操作\"></p>\n<p>总结完每一次在队列中插入和删除操作的过程之后，我们就可以开始动手写代码了。参考代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QueueUsingTwoStack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//声明两个栈:stack1、stack2</span></div><div class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;T&gt; stack1;</div><div class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;T&gt; stack2;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">QueueUsingTwoStack</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        stack1 = <span class=\"keyword\">new</span> Stack&lt;T&gt;();</div><div class=\"line\">        stack2 = <span class=\"keyword\">new</span> Stack&lt;T&gt;();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 往队列尾部插入一个元素</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@param</span> element 将要插入的元素</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">appendTail</span><span class=\"params\">(T element)</span> </span>&#123;</div><div class=\"line\">        stack1.push(element);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 删除队列头部元素</div><div class=\"line\">     *</div><div class=\"line\">     * <span class=\"doctag\">@return</span> 队列头部元素</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">deleteHead</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//把stack1中的元素逐个弹出并压入stack2</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (stack2.size() &lt;= <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            <span class=\"keyword\">while</span> (stack1.size() &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">                T element = stack1.pop();</div><div class=\"line\">                stack2.push(element);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//提示队列为空，返回空值</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (stack2.size() == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            System.out.print(<span class=\"string\">\"Queue is empty.\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//删除并获得队列头部元素</span></div><div class=\"line\">        T head = stack2.pop();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> head;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","categories":["编程题"],"tags":["java","algorithm"]},{"title":"about","url":"http://www.huangheng.site/about/index.html","content":"","categories":[],"tags":[]},{"title":"category","url":"http://www.huangheng.site/category/index.html","content":"","categories":[],"tags":[]},{"title":"project","url":"http://www.huangheng.site/project/index.html","content":"","categories":[],"tags":[]},{"title":"","url":"http://www.huangheng.site/css/personal-style.css","content":"/*! Generated by Font Squirrel (https://www.fontsquirrel.com) on July 23, 2017 */\n\n\n\n@font-face {\n    font-family: 'lemonadabold';\n    src: url('lemonada-bold-webfont.eot');\n    src: url('lemonada-bold-webfont.eot?#iefix') format('embedded-opentype'),\n         url('lemonada-bold-webfont.woff2') format('woff2'),\n         url('lemonada-bold-webfont.woff') format('woff'),\n         url('lemonada-bold-webfont.ttf') format('truetype'),\n         url('lemonada-bold-webfont.svg#lemonadabold') format('svg');\n    font-weight: normal;\n    font-style: normal;\n\n}","categories":[],"tags":[]},{"title":"search","url":"http://www.huangheng.site/search/index.html","content":"","categories":[],"tags":[]},{"title":"tag","url":"http://www.huangheng.site/tag/index.html","content":"","categories":[],"tags":[]}]