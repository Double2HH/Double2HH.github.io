<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heng</title>
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.huangheng.site/"/>
  <updated>2017-05-03T04:48:24.647Z</updated>
  <id>http://www.huangheng.site/</id>
  
  <author>
    <name>Heng</name>
    <email>huangheng1208@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用两个队列实现栈</title>
    <link href="http://www.huangheng.site/2017/05/03/%E7%94%A8%E4%B8%A4%E4%B8%AA%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>http://www.huangheng.site/2017/05/03/用两个队列实现栈/</id>
    <published>2017-05-02T16:00:00.000Z</published>
    <updated>2017-05-03T04:48:24.647Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>用两个队列实现栈。栈的声明如下，请实现它的两个函数push和pop，分别完成结点入栈和出栈的功能。</p>
</blockquote>
<a id="more"></a>
<p>我们通过一系列栈的压入和弹出操作来分析用两个队列模拟一个栈的过程。我们先往栈内压入一个元素a。由于两个队列现在都是空的，我们可以选择把a插入到两个队列中的任意一个。我们不妨把a插入queue1。接下来继续往栈内压入b、c两个元素，我们把它们都插入queue1。这个时候queue1包含3个元素a、b和c，其中a位于队列的头部，c位于队列的尾部（如图1（a）所示）。</p>
<p>现在我们考虑从栈内弹出一个元素。根据栈的后入先出原则，最后被压入栈的c应该最先被弹出。由于c位于queue1的尾部，而我们每次只能从队列的头部删除元素，因此我们可以先从queue1中依次删除元素a、b并插入到queue2中，再从queue1中删除元素c。这就相当于从栈中弹出元素c了（如图1（b）所示）。我们可以用同样的方法从栈内弹出元素b（如图1（c）所示）。</p>
<p>接下来我们考虑往栈内压入一个元素d。此时queue1已经有一个元素，我们就把d插入到queue1的尾部（如图1（d）所示）。如果我们再从栈内弹出一个元素，此时被弹出的应该是最后被压入栈的d。由于d位于queue1的尾部，我们只能先从头删除queue1的元素并插入到queue2，直到在queue1中遇到d再直接把它删除（如图1（e）所示）。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="\img\用两个队列模拟一个栈的操作.png" alt="图1：用两个队列模拟一个栈的操作" title="">
                </div>
                <div class="image-caption">图1：用两个队列模拟一个栈的操作</div>
            </figure>
<p>参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StackUsingTwoQueue</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明两个队列:queue1、queue2</span></div><div class="line">    <span class="keyword">private</span> LinkedBlockingQueue&lt;T&gt; queue1;</div><div class="line">    <span class="keyword">private</span> LinkedBlockingQueue&lt;T&gt; queue2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StackUsingTwoQueue</span><span class="params">()</span> </span>&#123;</div><div class="line">        queue1 = <span class="keyword">new</span> LinkedBlockingQueue&lt;T&gt;();</div><div class="line">        queue2 = <span class="keyword">new</span> LinkedBlockingQueue&lt;T&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将一个元素入栈</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> element 将要入栈的元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(T element)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//将元素插入到不为空的队列的尾部，如果两个队列均为空则插入到queue1</span></div><div class="line">            <span class="keyword">if</span> (queue1.size() &lt;= <span class="number">0</span> &amp;&amp; queue2.size() &lt;= <span class="number">0</span>) &#123;</div><div class="line">                queue1.put(element);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (queue1.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                queue1.put(element);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                queue2.put(element);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 将栈顶元素出栈</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 栈顶元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">pop</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        T result = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (queue1.size() &lt;= <span class="number">0</span> &amp;&amp; queue2.size() &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//栈为空</span></div><div class="line">            System.out.print(<span class="string">"Stack is empty."</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (queue1.size() &gt; <span class="number">0</span> &amp;&amp; queue2.size() &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//队列queue1不为空，queue2为空，</span></div><div class="line">            <span class="comment">//将queue1中除尾部元素之外的全部元素依次出队列并插入到queue2队列中</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span> (queue1.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">                    T element = queue1.poll();</div><div class="line">                    queue2.put(element);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//queue1中仅剩的一个元素即为栈顶元素</span></div><div class="line">            result = queue1.poll();</div><div class="line"></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (queue1.size() &lt;= <span class="number">0</span> &amp;&amp; queue2.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="comment">//队列queue2不为空，queue1为空，</span></div><div class="line">            <span class="comment">//将queue2中除尾部元素之外的全部元素依次出队列并插入到queue1队列中</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">while</span> (queue2.size() &gt; <span class="number">1</span>) &#123;</div><div class="line">                    T element = queue2.poll();</div><div class="line">                    queue1.put(element);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//queue2中仅剩的一个元素即为栈顶元素</span></div><div class="line">            result = queue2.poll();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用两个队列实现栈。栈的声明如下，请实现它的两个函数push和pop，分别完成结点入栈和出栈的功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程题" scheme="http://www.huangheng.site/categories/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
    
      <category term="java" scheme="http://www.huangheng.site/tags/java/"/>
    
      <category term="algorithm" scheme="http://www.huangheng.site/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="http://www.huangheng.site/2017/05/02/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>http://www.huangheng.site/2017/05/02/用两个栈实现队列/</id>
    <published>2017-05-01T16:00:00.000Z</published>
    <updated>2017-05-03T02:47:01.255Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数appendTail和deleteHead，分别完成在队列尾部插入结点和在队列头部删除结点的功能。</p>
</blockquote>
<a id="more"></a>
<p>我们通过一个具体的例子来分析往该队列插入和删除元素的过程。首先插入一个元素a，不妨先把它插入到stack1，此时stack1中的元素有{a}，stack2为空。再插入两个元素b和c，还是插入到stack1中，此时stack1中的元素有{a,b,c}，其中c位于栈顶，而stack2仍然是空的（如图1（a）所示）。</p>
<p>这个时候我们试着从队列中删除一个元素。按照队列先入先出的规则，由于a比b、c先插入到队列中，最先被删除的元素应该是a。元素a存储在stack1中，但并不在栈顶上，因此不能直接进行删除。注意到stack2我们还一直没有使用过，现在是让stack2发挥作用的时候了。如果我们把stack1中的元素逐个弹出并压入stack2，元素在stack2中的顺序正好和原来在stack1中的顺序相反。因此经过3次弹出stack1和压入stack2操作之后，stack1为空，而stack2中的元素是{c,b,a}，这个时候就可以弹出stack2的栈顶a了。此时的stack1为空，而stack2的元素为{c,b}，其中b在栈顶（如图1（b）所示）。</p>
<p>如果我们还想继续删除队列的头部应该怎么办呢？剩下的两个元素是b和c，b比c早进入队列，因此b应该先删除。而此时b恰好又在栈顶上，因此直接弹出stack2的栈顶即可。这次弹出操作之后，stack1中仍然为空，而stack2为{c}（如图1（c）所示）。</p>
<p>从上面的分析中我们可以总结出删除一个元素的步骤：当stack2中不为空时，在stack2中的栈顶元素是最先进入队列的元素，可以弹出。如果stack2为空时，我们把stack1中的元素逐个弹出并压入stack2。由于先进入队列的元素被压到stack1的底端，经过弹出和压入之后就处于stack2的顶端了，又可以直接弹出。</p>
<p>接下来再插入一个元素d。我们还是把它压入stack1（如图1（d）所示），这样会不会有问题呢？我们考虑下一次删除队列的头部，stack2不为空，直接弹出它的栈顶元素c（如图1（e）所示）。而c的确是比d先进入队列，应该在d之前从队列中删除，因此不会出现任何矛盾。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="\img\用两个栈模拟一个队列的操作.png" alt="图1:用两个栈模拟一个队列的操作" title="">
                </div>
                <div class="image-caption">图1:用两个栈模拟一个队列的操作</div>
            </figure>
<p>总结完每一次在队列中插入和删除操作的过程之后，我们就可以开始动手写代码了。参考代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueUsingTwoStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明两个栈:stack1、stack2</span></div><div class="line">    <span class="keyword">private</span> Stack&lt;T&gt; stack1;</div><div class="line">    <span class="keyword">private</span> Stack&lt;T&gt; stack2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QueueUsingTwoStack</span><span class="params">()</span> </span>&#123;</div><div class="line">        stack1 = <span class="keyword">new</span> Stack&lt;T&gt;();</div><div class="line">        stack2 = <span class="keyword">new</span> Stack&lt;T&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 往队列尾部插入一个元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> element 将要插入的元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(T element)</span> </span>&#123;</div><div class="line">        stack1.push(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除队列头部元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 队列头部元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//把stack1中的元素逐个弹出并压入stack2</span></div><div class="line">        <span class="keyword">if</span> (stack2.size() &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">while</span> (stack1.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                T element = stack1.pop();</div><div class="line">                stack2.push(element);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//提示队列为空，返回空值</span></div><div class="line">        <span class="keyword">if</span> (stack2.size() == <span class="number">0</span>) &#123;</div><div class="line">            System.out.print(<span class="string">"Queue is empty."</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//删除并获得队列头部元素</span></div><div class="line">        T head = stack2.pop();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用两个栈实现一个队列。队列的声明如下，请实现它的两个函数appendTail和deleteHead，分别完成在队列尾部插入结点和在队列头部删除结点的功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="编程题" scheme="http://www.huangheng.site/categories/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
    
      <category term="java" scheme="http://www.huangheng.site/tags/java/"/>
    
      <category term="algorithm" scheme="http://www.huangheng.site/tags/algorithm/"/>
    
  </entry>
  
</feed>
