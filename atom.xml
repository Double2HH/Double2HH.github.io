<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heng&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.huangheng.site/"/>
  <updated>2017-05-02T11:42:11.268Z</updated>
  <id>http://www.huangheng.site/</id>
  
  <author>
    <name>Heng</name>
    <email>huangheng1208@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>用两个栈实现队列</title>
    <link href="http://www.huangheng.site/2017/03/01/%E7%94%A8%E4%B8%A4%E4%B8%AA%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>http://www.huangheng.site/2017/03/01/用两个栈实现队列/</id>
    <published>2017-03-01T11:00:34.000Z</published>
    <updated>2017-05-02T11:42:11.268Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>用两个栈实现一个队列。队列的声明如下，请实现它的两个函数appendTail和deleteHead，分别完成在队列尾部插入结点和在队列头部删除结点的功能。</p>
</blockquote>
<p>​    <a id="more"></a></p>
<p>​    我们通过一个具体的例子来分析往该队列插入和删除元素的过程。首先插入一个元素a，不妨先把它插入到stack1，此时stack1中的元素有{a}，stack2为空。再插入两个元素b和c，还是插入到stack1中，此时stack1中的元素有{a,b,c}，其中c位于栈顶，而stack2仍然是空的（如图(a)所示）。</p>
<p>​    这个时候我们试着从队列中删除一个元素。按照队列先入先出的规则，由于a比b、c先插入到队列中，最先被删除的元素应该是a。元素a存储在stack1中，但并不在栈顶上，因此不能直接进行删除。注意到stack2我们还一直没有使用过，现在是让stack2发挥作用的时候了。如果我们把stack1中的元素逐个弹出并压入stack2，元素在stack2中的顺序正好和原来在stack1中的顺序相反。因此经过3次弹出stack1和压入stack2操作之后，stack1为空，而stack2中的元素是{c,b,a}，这个时候就可以弹出stack2的栈顶a了。此时的stack1为空，而stack2的元素为{c,b}，其中b在栈顶（如图(b)所示）。</p>
<p>​    如果我们还想继续删除队列的头部应该怎么办呢？剩下的两个元素是b和c，b比c早进入队列，因此b应该先删除。而此时b恰好又在栈顶上，因此直接弹出stack2的栈顶即可。这次弹出操作之后，stack1中仍然为空，而stack2为{c}（如图(c)所示）。</p>
<p>​    从上面的分析中我们可以总结出删除一个元素的步骤：当stack2中不为空时，在stack2中的栈顶元素是最先进入队列的元素，可以弹出。如果stack2为空时，我们把stack1中的元素逐个弹出并压入stack2。由于先进入队列的元素被压到stack1的底端，经过弹出和压入之后就处于stack2的顶端了，又可以直接弹出。</p>
<p>​    接下来再插入一个元素d。我们还是把它压入stack1（如图(d)所示），这样会不会有问题呢？我们考虑下一次删除队列的头部，stack2不为空，直接弹出它的栈顶元素c（如图(e)所示）。而c的确是比d先进入队列，应该在d之前从队列中删除，因此不会出现任何矛盾。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="\img\用两个栈实现队列.png" alt="用两个栈实现队列" title="">
                </div>
                <div class="image-caption">用两个栈实现队列</div>
            </figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueueUsingTwoStack</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//声明两个栈:stack1、stack2</span></div><div class="line">    <span class="keyword">private</span> Stack&lt;T&gt; stack1;</div><div class="line">    <span class="keyword">private</span> Stack&lt;T&gt; stack2;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QueueUsingTwoStack</span><span class="params">()</span> </span>&#123;</div><div class="line">        stack1 = <span class="keyword">new</span> Stack&lt;T&gt;();</div><div class="line">        stack2 = <span class="keyword">new</span> Stack&lt;T&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 往队列尾部插入一个元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> element 将要插入的元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendTail</span><span class="params">(T element)</span> </span>&#123;</div><div class="line">        stack1.push(element);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 删除队列头部元素</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span> 队列头部元素</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deleteHead</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//把stack1中的元素逐个弹出并压入stack2</span></div><div class="line">        <span class="keyword">if</span> (stack2.size() &lt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">while</span> (stack1.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">                T element = stack1.pop();</div><div class="line">                stack2.push(element);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//队列为空</span></div><div class="line">        <span class="keyword">if</span> (stack2.size() == <span class="number">0</span>) &#123;</div><div class="line">            System.out.print(<span class="string">"Queue is empty."</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//删除并获得队列头部元素</span></div><div class="line">        T head = stack2.pop();</div><div class="line"></div><div class="line">        <span class="keyword">return</span> head;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用两个栈实现一个队列。队列的声明如下，请实现它的两个函数appendTail和deleteHead，分别完成在队列尾部插入结点和在队列头部删除结点的功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​
    
    </summary>
    
      <category term="编程题" scheme="http://www.huangheng.site/categories/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
    
      <category term="algorithm" scheme="http://www.huangheng.site/tags/algorithm/"/>
    
      <category term="java" scheme="http://www.huangheng.site/tags/java/"/>
    
  </entry>
  
</feed>
